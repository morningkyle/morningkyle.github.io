[{"content":"Meet 0xAssistant — a Windows‑native desktop app that brings large‑language‑model assistance to classic WinDbg/CDB crash analysis without changing your workflow.\nTL;DR benefits 100% Windows‑native: no Python environment or packages needed. No extra front‑ends (no VS Code, Claude Desktop, or Cursor required). Full native WinDbg command support: run the exact same commands you already know and trust. Intuitive UI: a focused, familiar interface that keeps WinDbg power close at hand. Why 0xAssistant Debugging Windows crash dumps is powerful with WinDbg/CDB, but it’s verbose and context‑heavy. 0xAssistant pairs your existing commands with an LLM to summarize, explain, and suggest next steps — while keeping native tooling in the driver’s seat.\nKeep your muscle memory: issue native commands like !analyze -v, k, lm, and more. Get AI context: have the model interpret output, propose hypotheses, and recommend the next command. Stay in control: you decide when to run commands; the assistant never hides what it’s doing. Quick start Prerequisites Windows 11 (x64) WinDbg/CDB installed (from the Windows SDK) Using 0xAssistant Open a dump as you normally would with WinDbg/CDB. Run native commands; ask the assistant to explain output, identify patterns, or suggest the next command. Iterate quickly: combine your expertise with AI summaries for faster root‑cause discovery. What you can do Drive classic investigations with Windbg command(\u0026gt;\u0026gt;!analyze -v), stack walks(\u0026gt;\u0026gt;k), memory inspection(\u0026gt;\u0026gt;db), and module/version checks(\u0026gt;\u0026gt;lm). Ask for plain‑English explanations of cryptic output, failure buckets, and call stacks. Explore hypotheses: “What looks suspicious?”, “Which thread likely faulted?”. Feedback Try it and share your experience — what helped, what’s missing, and what would save you more time. Share with colleagues who live in WinDbg/CDB and would benefit from an AI co‑pilot. For product questions or early access updates, reach out through your usual channel. 0xAssistant aims to amplify, not replace, your WinDbg skills. If you’re already fast in native tools, you’ll feel at home — with a helpful co‑pilot when you want it.\n","permalink":"http://morningkyle.github.io/posts/introducing-0xassistant/","summary":"0xAssistant is a Windows‑native app that layers an LLM atop WinDbg/CDB to explain output, suggest next steps, and speed up crash dump analysis—no Python or extra tooling required.","title":"Introducing 0xAssistant: an LLM‑powered WinDbg assistant for Windows"},{"content":"Building a Blog with Full Control I wanted to build a blog site where I have complete control over my data—not just how it\u0026rsquo;s presented, but also how it\u0026rsquo;s managed and versioned. GitHub Pages perfectly meets this requirement as a static site hosting service that\u0026rsquo;s built around a GitHub repository, giving me full ownership and control over my content.\nStatic Site Generation With GitHub handling data management and hosting, the next step is generating HTML-formatted content for web pages. This is where Hugo, an open-source Static Site Generation (SSG) tool, comes into play.\nSSG represents a modern web development approach that pre-builds website pages into HTML, CSS, and JavaScript files during the build process. Unlike traditional dynamic websites that generate content on-demand for each user request, static sites deliver pre-compiled pages directly to users. This results in significantly faster load times and improved performance. Additionally, the technology stack remains minimal, clean, and easy to maintain.\n","permalink":"http://morningkyle.github.io/posts/blog-built-with-ssg/","summary":"Explains the choice made for this blog site: GitHub Pages and Hugo.","title":"Build a Blog Site with Full Control"}]